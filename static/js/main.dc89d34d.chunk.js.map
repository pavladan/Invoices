{"version":3,"sources":["containers/Invoices.js","containers/CreateInvoice.js","components/NotFound.js","actions/index.js","App.js","serviceWorker.js","reducers/loadDB.js","reducers/index.js","index.js"],"names":["Invoices","onDeleteClick","e","_this","props","onDelete","target","dataset","id","onOpenClick","document","querySelectorAll","forEach","el","currentTarget","classList","remove","toggle","_this2","this","invoices","state","tableLine","db","map","react_default","a","createElement","Row","key","className","onClick","Col","date_created","number","date_supply","comment","data-id","table","errors","react_router_dom","to","Button","loading","Component","connect","dispatch","type","payload","CreateInvoice","randomString","chars","string_length","arguments","length","undefined","randomstring","i","rnum","Math","floor","random","substring","addZero","dat","num","String","formatDate","datastring","d","Date","getDate","getMonth","getFullYear","dy","dm","dd","onClickSave","onSaves","_loop","res","filter","v","_ret","inputNum","value","inputSupplyDate","inputInvoiceDate","inputComment","Form","Group","Label","Control","defaultValue","ref","input","placeholder","min","max","as","rows","Object","objectSpread","NotFound","LOAD_DB_OK","LOAD_DB_REQUESTED","App","Container","react_router","exact","path","component","Boolean","window","location","hostname","match","defaultState","action","concat","toConsumableArray","history","createBrowserHistory","store","createStore","combineReducers","router","connectRouter","loadDB","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","es","esm","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qlIAMMA,oNAEJC,cAAc,SAACC,GACbC,EAAKC,MAAMC,SAASH,EAAEI,OAAOC,QAAQC,OAEvCC,YAAY,SAACP,GAEXQ,SAASC,iBAAiB,SAASC,QAAQ,SAAAC,GAAE,OAAEA,IAAOX,EAAEY,eAAiBD,EAAGE,UAAUC,OAAO,UAC7Fd,EAAEY,cAAcC,UAAUE,OAAO,iFAG3B,IAAAC,EAAAC,KACFC,EAAWD,KAAKf,MAAMiB,MAAMD,SAqBhC,OApBAD,KAAKG,UAAYF,EAASG,IAAMH,EAASG,GAAGC,IAAI,SAACX,GAAD,OAC9CY,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,IAAMhB,EAAGL,GAAIsB,UAAU,aAAaC,QAASb,EAAKT,aACrDgB,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAMnB,EAAGoB,cACTR,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAMnB,EAAGqB,QACTT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAMnB,EAAGsB,aACTV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKF,UAAU,WAAWjB,EAAGuB,SAC7BX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SAASC,QAASb,EAAKjB,cAAeoC,UAASxB,EAAGL,QAGrEW,KAAKmB,MACHb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKE,UAAU,cACbL,EAAAC,EAAAC,cAACK,EAAA,EAAD,eACAP,EAAAC,EAAAC,cAACK,EAAA,EAAD,WACAP,EAAAC,EAAAC,cAACK,EAAA,EAAD,eACAP,EAAAC,EAAAC,cAACK,EAAA,EAAD,iBAEDb,KAAKG,WAGc,OAApBF,EAASmB,OAAwBd,EAAAC,EAAAC,cAAA,gCAEnCF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAEjBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBACbL,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAG,QAAOhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,kBAElBjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,sBACCP,EAASuB,QAAUlB,EAAAC,EAAAC,cAAA,uBAAoBR,KAAKmB,eA9ChCM,cAoDRC,cACb,SAACxB,GAAD,MAAU,CACRA,UAEF,SAAAyB,GAAQ,MAAG,CACTzC,SAAS,SAACG,GACRsC,EAAS,CAACC,KAAK,iBAAiBC,QAAQxC,OAN/BqC,CASX7C,mBC7DEiD,oNACJC,aAAc,WAAmC,IAC3CC,EADSC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlB,GAAGN,EAAeM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAV,OAE1B,SAAPN,EACFI,EAAQ,gEACM,WAAPJ,IACPI,EAAQ,cAEV,IADA,IAAIK,EAAe,GACVC,EAAE,EAAGA,EAAEL,EAAeK,IAAK,CAClC,IAAIC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWV,EAAMG,QAC5CE,GAAgBL,EAAMW,UAAUJ,EAAKA,EAAK,GAE5C,OAAOF,KAETO,QAAQ,SAACC,EAAIC,GACX,OAAIC,OAAOF,GAAKV,OAAOW,EAAY9D,EAAK4D,QAAQ,IAAIC,EAAIC,GACjDD,KAETG,WAAW,SAACC,GACV,IAAIA,EAAY,MAAO,GACvB,IAAIC,EAAI,IAAIC,KAAKF,GACjB,OAAOjE,EAAK4D,QAAQM,EAAEE,UAAU,GAAG,IAAIpE,EAAK4D,QAASM,EAAEG,WAAW,EAAG,GAAG,IAAIrE,EAAK4D,QAAQM,EAAEI,cAAc,MAE3GF,QAAQ,WACN,IAAIF,EAAI,IAAIC,KACRI,EAAGL,EAAEI,cACLE,EAAIN,EAAEG,WAAW,EACjBI,EAAGP,EAAEE,UACT,OAAOpE,EAAK4D,QAAQW,EAAG,GAAG,IAAIvE,EAAK4D,QAAQY,EAAG,GAAG,IAAIxE,EAAK4D,QAAQa,EAAG,MAIvEC,YAAY,WACV1E,EAAKC,MAAM0E,QACT,CACEtE,GAAK,WACH,IADQ,IAAAuE,EAAA,WAEN,IAAIC,EAAI7E,EAAK+C,eACb,GAAG/C,EAAKC,MAAMiB,MAAMD,SAASG,IAAsE,IAAhEpB,EAAKC,MAAMiB,MAAMD,SAASG,GAAG0D,OAAO,SAAA/E,GAAC,OAAEA,EAAEM,KAAOwE,IAAK1B,OACtF,OAAA4B,EAAOF,MAHA,KAAAG,EAAAJ,IAAA,qBAAAI,EAAA,OAAAA,EAAAD,GADR,GAOLhD,OAAQ/B,EAAKiF,SAASC,MACtBpD,aAAa9B,EAAKgE,WAAWhE,EAAKmF,gBAAgBD,OAClDlD,YAAYhC,EAAKgE,WAAWhE,EAAKoF,iBAAiBF,OAClDjD,QAAQjC,EAAKqF,aAAaH,QAE9BlF,EAAKiF,SAASC,MAAM,GACpBlF,EAAKmF,gBAAgBD,MAAM,GAC3BlF,EAAKoF,iBAAiBF,MAAM,GAC5BlF,EAAKqF,aAAaH,MAAM,4EAElB,IAAAnE,EAAAC,KACN,OACEM,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAEnBL,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KACEhE,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAG,IAAIX,UAAU,SACvBL,EAAAC,EAAAC,cAAC8D,EAAA,EAAKC,MAAN,KACEjE,EAAAC,EAAAC,cAAC8D,EAAA,EAAKE,MAAN,eACAlE,EAAAC,EAAAC,cAAC8D,EAAA,EAAKG,QAAN,CAAc7C,KAAK,SAAS8C,aAAc1E,KAAK+B,aAAa,EAAE,UAAW4C,IAAK,SAAAC,GAAK,OAAE7E,EAAKkE,SAASW,GAAOC,YAAY,eAAeC,IAAI,QAAQC,IAAI,UACrJzE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAC8D,EAAA,EAAKE,MAAN,oBACAlE,EAAAC,EAAAC,cAAC8D,EAAA,EAAKG,QAAN,CAAc7C,KAAK,OAAO8C,aAAc1E,KAAKoD,UAAWuB,IAAK,SAAAC,GAAK,OAAE7E,EAAKoE,gBAAgBS,GAAOC,YAAY,iBAE9GvE,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAC8D,EAAA,EAAKE,MAAN,qBACAlE,EAAAC,EAAAC,cAAC8D,EAAA,EAAKG,QAAN,CAAc7C,KAAK,OAAO8C,aAAc1E,KAAKoD,UAAWuB,IAAK,SAAAC,GAAK,OAAE7E,EAAKqE,iBAAiBQ,GAAOC,YAAY,kBAGjHvE,EAAAC,EAAAC,cAAC8D,EAAA,EAAKE,MAAN,gBACAlE,EAAAC,EAAAC,cAAC8D,EAAA,EAAKG,QAAN,CAAcO,GAAG,WAAWC,KAAK,IAAIN,IAAK,SAAAC,GAAK,OAAE7E,EAAKsE,aAAaO,MAErEtE,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAG,KACPhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQZ,UAAU,iBAAiBC,QAASZ,KAAK0D,aAAjD,kBA9EkBjC,cAqFbC,cACb,SAAAxB,GAAK,MAAG,CAACA,UACT,SAAAyB,GAAQ,MAAG,CACTgC,QAAQ,SAAC9B,GACPF,EAAS,CAACC,KAAK,cAAcC,QAAQqD,OAAAC,EAAA,EAAAD,CAAA,GAAIrD,QAJhCH,CAOXI,GC5FWsD,EALE,kBACf9E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gJCFE6E,EAAa,aAEbC,EAAoB,wBCQpBC,8LAEFvF,KAAKf,MAAM0C,SDRN,SAAAA,GACLA,EAAS,CACLC,KAAM0D,IAgBV3D,EAAS,CACLC,KAAMyD,EACNjF,GAAIA,EAAGH,8CCTX,OACEK,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KACElF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,KACEnF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/G,IACjCyB,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAOE,KAAK,OAAOC,UAAW9D,IAC9BxB,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAOG,UAAWR,aAVV3D,aAiBHC,cAAQ,SAAAxB,GAAK,MAAG,CAACA,UAAjBwB,CAA0B6D,GChBrBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uEClBAC,EAAe,CAAC1E,SAAQ,EAAOpB,GAAI,KAAMgB,OAAQ,MACxC,SAAShB,IAAgC,IAA7BF,EAA6BgC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArBgE,EAAcC,EAAOjE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAQ+D,EAAOvE,MACb,IAAK,oBACJ,MAAO,CAACJ,SAAQ,GACjB,IAAK,aACJ,MAAM,CAACA,SAAQ,EAAOpB,GAAG+F,EAAO/F,GAAGgB,OAAO,MAC3C,IAAK,eACJ,MAAO,CAACI,SAAQ,EAAOpB,GAAG,KAAMgB,OAAO+E,EAAO/E,QAC/C,IAAK,cACH,MAAO,CACLI,QAAStB,EAAMsB,QACfJ,OAAOlB,EAAMkB,OACbhB,GAAE,GAAAgG,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAKhF,EAAME,IAAX,CAAe+F,EAAOtE,WAE5B,IAAK,iBACH,MAAO,CACLL,QAAStB,EAAMsB,QACfJ,OAAOlB,EAAMkB,OACbhB,GAAG8E,OAAAmB,EAAA,EAAAnB,CAAIhF,EAAME,GAAG0D,OAAO,SAAA/E,GAAC,OAAEA,EAAEM,KAAO8G,EAAOtE,YAE9C,QACA,OAAO3B,GClBI,IAACoG,ECWVA,EAAUC,cACVC,EAAQC,uBDZEH,ECaNA,EDbiBI,0BAAgB,CACzCC,OAAOC,YAAcN,GACrBrG,SAAW4G,KCYXC,8BAAoBC,0BAAgBC,YAAiBV,GAASW,OAEhEC,IAASC,OACP7G,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAUZ,MAAQA,GACflG,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAiBf,QAASA,GACxBhG,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACCf,EAAAC,EAAAC,cAAC8G,EAAD,SAIL/H,SAASgI,eAAe,SHqGrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc89d34d.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport {Button,Col,Row} from 'react-bootstrap'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from 'react-router-dom'\r\nimport './Invoices.scss'\r\n\r\nclass Invoices extends Component{\r\n  \r\n  onDeleteClick=(e)=>{\r\n    this.props.onDelete(e.target.dataset.id);\r\n  }\r\n  onOpenClick=(e)=>{\r\n    \r\n    document.querySelectorAll('.open').forEach(el=>el !== e.currentTarget && el.classList.remove('open'));\r\n    e.currentTarget.classList.toggle('open');\r\n    \r\n  }\r\n  render(){\r\n    let invoices = this.props.state.invoices;\r\n    this.tableLine = invoices.db && invoices.db.map((el)=>(\r\n      <Row key ={el.id} className=\"table-line\" onClick={this.onOpenClick}>\r\n        <Col>{el.date_created}</Col>\r\n        <Col>{el.number}</Col>\r\n        <Col>{el.date_supply}</Col>\r\n        <Col className='comment'>{el.comment }</Col>\r\n        <div className=\"delete\" onClick={this.onDeleteClick} data-id={el.id}></div>\r\n      </Row>)\r\n    );\r\n    this.table = (\r\n      <div className=\"table\">\r\n        <Row className=\"table-head\">\r\n          <Col>Create</Col>\r\n          <Col>No</Col>\r\n          <Col>Supply</Col>\r\n          <Col>Comment</Col>\r\n        </Row>\r\n        {this.tableLine}\r\n      </div>\r\n    );\r\n    if (invoices.errors !== null) return <p>Error load database</p>\r\n    return (\r\n      <div className=\"Invoices\">\r\n        <div className='title'>\r\n          <h1>Invoices</h1>\r\n          <div className=\"title__line\"></div>\r\n        </div>\r\n        <div className=\"Invoices__actions\">\r\n          <h6>Actions</h6>\r\n          <Link to=\"/add\"><Button>Add new</Button></Link>\r\n        </div>\r\n        <div className=\"Invoices__main\">\r\n          <h6>Invoices</h6>\r\n          {invoices.loading ? <p>Loading...</p> : this.table}        \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n  (state)=>({\r\n    state\r\n  }),\r\n  dispatch=>({\r\n    onDelete:(id)=>{\r\n      dispatch({type:'DELETE_INVOICE',payload:id})\r\n    }\r\n  })\r\n  )(Invoices)","import React,{Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Form, Button, Row, Col} from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom';\r\nimport './CreateInvoice.scss'\r\n\r\nclass CreateInvoice extends Component {\r\n  randomString =(string_length = 24,type='char')=> {\r\n    let chars;\r\n    if (type==='char')\r\n      chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\";\r\n    else if (type==='number')\r\n      chars = \"0123456789\";\r\n    let randomstring = '';\r\n    for (let i=0; i<string_length; i++) {\r\n      let rnum = Math.floor(Math.random() * chars.length);\r\n      randomstring += chars.substring(rnum,rnum+1);\r\n    }\r\n    return randomstring;\r\n  }\r\n  addZero=(dat,num)=>{\r\n    if (String(dat).length<num) return this.addZero('0'+dat,num);\r\n    return dat;\r\n  }\r\n  formatDate=(datastring)=>{\r\n    if(!datastring) return '';\r\n    let d = new Date(datastring);\r\n    return this.addZero(d.getDate(),2)+'.'+this.addZero((d.getMonth()+1),2)+'.'+this.addZero(d.getFullYear(),4);\r\n  }\r\n  getDate=()=>{\r\n    let d = new Date();\r\n    let dy=d.getFullYear();\r\n    let dm=(d.getMonth()+1);\r\n    let dd=d.getDate();\r\n    return this.addZero(dy,4)+'-'+this.addZero(dm,2)+'-'+this.addZero(dd,2);\r\n  }\r\n  \r\n  \r\n  onClickSave=()=>{\r\n    this.props.onSaves(\r\n      {\r\n        id: (()=> {\r\n          while(true){ \r\n            let res=this.randomString(); \r\n            if(this.props.state.invoices.db && this.props.state.invoices.db.filter(e=>e.id === res).length === 0)\r\n              return res;\r\n          }\r\n        })(),\r\n        number: this.inputNum.value,\r\n        date_created:this.formatDate(this.inputSupplyDate.value),\r\n        date_supply:this.formatDate(this.inputInvoiceDate.value),\r\n        comment:this.inputComment.value\r\n      });\r\n    this.inputNum.value='';\r\n    this.inputSupplyDate.value='';\r\n    this.inputInvoiceDate.value='';\r\n    this.inputComment.value='';\r\n  }\r\n  render(){\r\n    return(\r\n      <div className='CreateInvoice'>\r\n        <div className='title'>\r\n          <h1>Create Invoice</h1>\r\n          <div className=\"title__line\"></div>\r\n        </div>\r\n      <Form>\r\n        <Link to='/' className='exit'></Link>\r\n        <Form.Group>\r\n          <Form.Label>Number</Form.Label>\r\n          <Form.Control type='number' defaultValue={this.randomString(6,'number')} ref={input=>this.inputNum=input} placeholder='Enter Number' min='00000' max='99999'></Form.Control>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Supply Date</Form.Label>\r\n              <Form.Control type='date' defaultValue={this.getDate()} ref={input=>this.inputSupplyDate=input} placeholder='Select Date' ></Form.Control>\r\n            </Col>\r\n            <Col>\r\n              <Form.Label>Invoice Date</Form.Label>\r\n              <Form.Control type='date' defaultValue={this.getDate()} ref={input=>this.inputInvoiceDate=input} placeholder='Select Date' ></Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Form.Label>Comment</Form.Label>\r\n          <Form.Control as='textarea' rows=\"3\" ref={input=>this.inputComment=input}></Form.Control>\r\n        </Form.Group>\r\n        <Link to='/'>\r\n          <Button className='col-3 offset-9' onClick={this.onClickSave}>Save</Button>\r\n        </Link>\r\n      </Form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n  state=>({state}),\r\n  dispatch=>({\r\n    onSaves:(payload)=>{\r\n      dispatch({type:'ADD_INVOICE',payload:{...payload}})\r\n    }\r\n  })\r\n  )(CreateInvoice)","import React from 'react'\r\nconst NotFound = ()=>(\r\n  <div>\r\n    <h1>Страница не найдена</h1>\r\n  </div>\r\n)\r\nexport default NotFound;","import db from '../db.json';\r\nconst LOAD_DB_OK = 'LOAD_DB_OK';\r\n// const LOAD_DB_FAIL ='LOAD_DB_FAIL';\r\nconst LOAD_DB_REQUESTED = 'LOAD_DB_REQUESTED';\r\nexport function loadDB() {\r\n  return dispatch => {\r\n    dispatch({\r\n        type: LOAD_DB_REQUESTED\r\n    });\r\n    // fetch(db)\r\n    //     .then (result=>result.json())\r\n    //     .then(result => {\r\n    //         dispatch({\r\n    //             type: LOAD_DB_OK,\r\n    //             db: result.invoices\r\n    //         })\r\n    //     })\r\n    //     .catch(fail => {\r\n    //         dispatch({\r\n    //             type: LOAD_DB_FAIL,\r\n    //             errors: fail\r\n    //         })\r\n    //     })\r\n    dispatch({\r\n        type: LOAD_DB_OK,\r\n        db: db.invoices\r\n    })\r\n    \r\n  }\r\n}","import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport {Route,Switch} from 'react-router-dom'\nimport './App.css';\nimport Invoices from './containers/Invoices'\nimport CreateInvoice from './containers/CreateInvoice.js'\nimport NotFound from './components/NotFound'\nimport {Container} from 'react-bootstrap';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {loadDB} from './actions'\n\nclass App extends Component {\n  componentDidMount(){\n    this.props.dispatch(loadDB());\n  }\n  render() {   \n    return (\n      <Container>\n        <Switch>\n          <Route exact path=\"/\" component={Invoices}/>\n          <Route path=\"/add\" component={CreateInvoice} />\n          <Route component={NotFound} />\n        </Switch>\n      </Container>\n    );\n  }\n}\n\nexport default connect(state=>({state}))(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultState = {loading:false, db: null, errors: null};\r\nexport default function db(state = defaultState, action){\r\n  switch (action.type){\r\n    case \"LOAD_DB_REQUESTED\":\r\n     return {loading:true};\r\n    case \"LOAD_DB_OK\":\r\n     return{loading:false, db:action.db,errors:null};\r\n    case \"LOAD_DB_FAIL\":\r\n     return {loading:false, db:null, errors:action.errors};\r\n    case \"ADD_INVOICE\":\r\n      return {\r\n        loading: state.loading,\r\n        errors:state.errors,\r\n        db:[...state.db, action.payload]\r\n      };\r\n    case \"DELETE_INVOICE\":\r\n      return {\r\n        loading: state.loading,\r\n        errors:state.errors,\r\n        db:[...state.db.filter(e=>e.id !== action.payload)]\r\n      }\r\n    default:\r\n    return state;\r\n  }\r\n}","import {combineReducers} from 'redux'\r\nimport {connectRouter} from 'connected-react-router'\r\nimport loadDB from './loadDB'\r\n\r\nexport default (history)=> combineReducers({\r\n  router:connectRouter(history),\r\n  invoices : loadDB\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport {routerMiddleware, ConnectedRouter} from 'connected-react-router';\nimport {createBrowserHistory} from 'history';\nimport {BrowserRouter} from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers';\n\nconst history = createBrowserHistory();\nconst store = createStore(\n  reducer(history),\n  composeWithDevTools(applyMiddleware(routerMiddleware(history),thunk))\n);\nReactDOM.render(\n  <Provider store ={store}>\n     <ConnectedRouter history={history}>\n       <BrowserRouter>\n        <App />\n       </BrowserRouter>\n     </ConnectedRouter>\n   </Provider>,\n   document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}